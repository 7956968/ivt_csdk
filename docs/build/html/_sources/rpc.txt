IVR RPC 协议
==================

名词解释
^^^^^^^^^^^^^

- IVR：internet video recorder，一种基于物联网云计算技术的网络视频录象机；
  与传统NVR，DVR类似，IVR可以接入和管理各种摄像头，支持录像，支持直播点播视频等功能，
  但是与传统NVR，DVR的不同在于用户可以在互联网上观看直播点播，
  并且因为应用了云计算技术，IVR拥有近于无限的接入能力以及海量的并发直播点播请求；IVR主要由IVC与IVT两部分组成。

- IVC：internet video cloud，运行于云端的视频云平台；
  提供API接口以及管理网页，用户可以随时通过互联网，以网页，APP公众号等方式接入IVC，对其名下的摄像头进行管理，并进行直播点播。

- IVT：安装与客户现场的，具有与IVC通信能力的视频设备，如摄像头，NVR等，IVT通过IVR RPC协议接入IVC，并接受IVC的管理。

- Channel：IVT上的视频通道；
  一般一路摄像头为一条channel，如果IVT为摄像头，则只有一条通道；
  如果IVT为NVR，则会有多条通道，每条通道代表一个NVR管理下的摄像头。

- IVR RPC：IVT与IVR之间采用的通信协议

协议特性
^^^^^^^^^^^^

IVR RPC底层基于TCP/IP的websocket，应用层为基于JSON的自定义协议。

应用层协议的基本通信模式包括RPC与event（事件通知）两种：

1. RPC为一应一答模式；通信中的两个端点均可以发起RPC请求，且两个方向上的RPC请求是完全独立的；但是单一方向上，只有在当前请求被应答后，才能发起下一个RPC请求

2. 事件通知是没有应答的；通信中的两个端点均可以给对方发送事件通知；事件通知可以随时发起，不受当前是否有RPC正在进行的影响。

应用层协议数据包格式
^^^^^^^^^^^^^^^^^^^^^^^^^^

此处数据包指的是应用层协议的数据包，即websocket的payload/message。数据包使用JSON标准进行串行化。

RPC request
++++++++++++

RPC请求包的格式 ::

  {
    “req”: <字符串，必填，请求的RPC方法>,
    “params”: <JSON对象，可选，RPC方法的参数；当方法没有参数时，此域不存在>,
    “seq”: <整数，必填，RPC的序列号；没发送一次请求，+1>
  }

RPC调用成功的response
+++++++++++++++++++++++++++++++

当RPC调用成功，应答包的格式 ::

  {
    “seq”: <整数，必填，RPC的序列号；与对应的RPC请求的序列号一致>,
    “resp”: <JSON对象，必选，应答内容>
  }

RPC调用失败的response
++++++++++++++++++++++++++++++++

当RPC调用失败，应答包的格式 ::

  {
    “seq”: <整数，必填，RPC的序列号；与对应的RPC请求的序列号一致>,
    “err”: {
      “code”: <整数，必填，错误码>,
      “msg”: <字符串，必填，错误信息>
    }
  }

事件通知
+++++++++++

事件通知包的格式 ::

  {
    “event”: <字符串，必填，事件名称>,
    “params”: <JSON对象，可选，参数；当没有参数时，该域不存在>
  }

异常处理
^^^^^^^^^^^^

当通讯的一段发现如下异常时，需主动断开websocket连接：

1. RPC的request与response的seq（序列号不一致）

2. 在没有响应上一个RPC request的情况下收到其他RPC request

3. 调用的RPC方法不存在

4. 数据包格式不正确

协议流程
^^^^^^^^^^^

1. IVT向IVC发起websocket连接，并携带上login_code，login_password等信息。

2. IVC测在接收到请求后，验证IVT身份，若通过，则与IVT建立websocket连接。

3. IVT定期向IVC发送keepalive事件，在keepalive事件中携带其下摄像头的状态信息。

4. 根据业务安排，IVT与IVC可以进行各种RPC与event的交换。

IVC的websocket URL格式如下: ::

  ws://<IVC host:port>/ivc? login_code=<IVT登录名>&login_passwd=<IVT登录密码>&project=<所属项目名称>&hardware_model=<IVT的硬件型号>&firmware_model=<IVT的固件版本号>

IVC支持的RPC方法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

此处描述所有IVT可以调用的IVC的RPC方法。其中“参数”指的是RPC request数据包中的params域；
“成功应答”指的是RPC调用成功的response中的resp域；“失败应答”值得是RPC调用失败的response中的err域。

preview_server
++++++++++++++++

IVT可通过该方法获取用于上传摄像头预览图的上传服务器的地址。

参数： ::

  无

成功应答： ::

  字符串，必填，上传服务器的域名/IP；如 192.168.1.120:9900

ivt_package
++++++++++++++++

IVT可通过该方法获取最新的固件的版本，及其下载URL。

参数： ::

  无

成功应答： ::

  {
    "ivt": {
      "version": <必填，字符串；最新固件的版本号>
      "url": <比填，字符串；最新固件的下载地址>
    }
  }

IVT支持的RPC方法
^^^^^^^^^^^^^^^^^^^

此处描述所有可以被调用的IVT的RPC方法。

RTMPPublish
++++++++++++

IVC可以通过该方法请求IVT publish一条RTMP流到指定URL。

参数： ::

  {
    "channel": <必填，整数>,
    "quality": <必填，字符串；可选值为：LD、SD、HD、FHD，分别代表低清，标清，高清，全高清>,
    "url": <必填，字符串；publish RTMP流的目标URL>,
    "stream_Id": <必填，字符串；用来标识这条流的ID>
  }

成功应答（即publish成功，或该RTPM stream已经存在）： ::

  空

RTMPStopPublish
+++++++++++++++++

IVC可以通过该方法请求IVT结束正在publish的RTMP流。

参数： ::

  {
    "stream_id": <必填，字符串；RTMPPublish时给的stream_id>,
    "channel": <必填，整数>
  }

成功应答（成功结束，或该流不存在）： ::

  空

ptzCtrl
++++++++++++

IVC可以通过该方法操作摄像头的云台。

参数： ::

  {
    "channel": <必填，整数>,
    "op": <必填，字符串；云台的操作码，具体参见下面列表>,
    "speed": <必填，整数；云台移动速度，范围为0-100，0最慢，100最快>,
  }

===========   ===========   =========
op            操作           其他
===========   ===========   =========
up            上
down          下
left          左
right         右
upleft        左上
upright       右上
downleft      左下
downright     右下
stop          停止
zoomin        拉近
zoomout       拉远
===========   ===========   =========


IVC支持的event
^^^^^^^^^^^^^^^^^

此处描述IVC接受的event事件通知。“参数”指的是事件通知数据包中的params域。

Keepalive
+++++++++++++

IVT利用该事件定期向IVC通知工作状态，IVC以此作为IVT仍然在线的依据。

参数： ::

  {
    'state': <必填，整数；IVT的状态，1：在线，2：升级中>
    'channels': {
      0: {'state': <必填，整数；该channel的状态，0：离线，1：在线，2：直播中>}
      1: {'state': <必填，整数；该channel的状态，0：离线，1：在线，2：直播中>}
      ......
    }
  }


