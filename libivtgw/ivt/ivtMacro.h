#include <stdio.h>
#ifndef _IVTMACRO_
#define _IVTMACRO_

#define IVT_ERR(fmt,args...)    fprintf(stderr, "[%s - %s - %d]"fmt, __FILE__, __FUNCTION__, __LINE__, ##args)
//#define DEBUG_IVT 0

#if(DEBUG_IVT)
	#define IVT_DEBUG(fmt,args...)    fprintf(stderr, "[%s - %s - %d]"fmt, __FILE__, __FUNCTION__, __LINE__, ##args)
#else
	#define IVT_DEBUG(fmt,args...)    //fprintf(stderr, "[%s - %s - %d]"fmt, __FILE__, __FUNCTION__, __LINE__, ##args)
#endif

#define HTTP_URL "127.0.0.1"//"127.0.0.1" //172.16.3.113
#define HTTP_PORT 80
#define HTTP_RECV_TIMEOUT  15

#define IVT_SNAP_PEROID (15*60)
#define IVT_URL_SIZE 512
#define IVT_VERSION_SIZE 128
#define IVT_PTZ_TOKEN_SIZE 32
#define IVT_PTZ_NAME_SIZE 32
#define IVT_RCD_ID_SIZE 128
#define IVT_ALARM_DES_SIZE 128
#define IVT_CHANNEL_NUM 16
#define IVT_STR_ID_SIZE 128
#define IVT_MSG_SIZE 128
#define IVT_TOKEN_NUM 128
#define SNAP_PIC_TIME 800  //800
#define FIRMWARE_HOUR 3
#define ELEMENT_SIZE 5
#define RES_ELEMENT_SIZE 2

#define WS_BUF_SIZE 2048
#define PARA_BUF_SIZE 2048

#define PARA_BUF_SIZE_IVT_REQ  (IVT_RCD_ID_SIZE*IVT_CHANNEL_NUM+2048)
#define WS_BUF_SIZE_IVT_REQ ((IVT_RCD_ID_SIZE+10)*IVT_CHANNEL_NUM+2048)

#define WS_BUF_SIZE_PTZ ((IVT_PTZ_TOKEN_SIZE+IVT_PTZ_NAME_SIZE+20)*IVT_TOKEN_NUM+1024)
#define PARA_BUF_SIZE_PTZ ((IVT_PTZ_TOKEN_SIZE+IVT_PTZ_NAME_SIZE)*IVT_TOKEN_NUM+1024)

typedef enum {
    IVT_SUCCESS = 0,
	IVT_FAILURE = -1,
    IVT_OP_ORDER_ERR = -2,
	IVT_IN_PARA_ERR = -3,
	IVT_NOT_SUPPORT = -4,
	IVT_NO_RES_ERR = -5,  //no resource is available, ex. encoder channel
	IVT_INNER_ERR = -6
}AIPU_RET;

typedef enum
{
	RPC_REQ = 0,
	RPC_EVENT,
	RPC_RESP,
	RPC_ERR,
	RPC_ELSE
}RPC_TPYE;

typedef enum
{
	IVT_PREVIEW_SERVER = 0,
	IVT_GET_FIRMWARE,
	IVT_KEEPALIVE,
	IVT_ALARMNOTIFY,
	IVT_ELSE_METHOD
}IVT_METHOD_TYPE;

typedef enum
{
	//IVT_KEEPALIVE = 0,
	IVT_ELSE_EVENT = 1
}IVT_EVENT_TYPE;

typedef enum
{
	IVC_RTMPPUBLISH = 0,
	IVC_RTMPSTOPPUBLISH,
	IVC_REBOOTCHANNEL,
	IVC_GETPTZPRESETLIST,
	IVC_GETPTZPRESETTOURLIST,
	IVC_STARTCLOUDRECORD,
	IVC_STOPCLOUDRECORD,
	IVC_ALARMMOVEDETECTCONFIG,
	IVC_ALARMRECTDETECTCONFIG,
	IVC_ELSE_METHOD
}IVC_METHOD_TYPE;

typedef enum
{
	IVC_CTRLPTZ = 0,
	IVC_GOTOPTZPRESET,
	IVC_CTRLPTZPRESETTOUR,
	IVC_CTRLPTZPATROL,
	IVC_SYNCTIME,
	IVC_UPGRADEFIRMWARE,
	IVC_ELSE_EVENT
}IVC_EVENT_TYPE;

typedef enum
{
	IVC_ERR0 = 0,
	IVC_ERR1,
	IVC_ELSE_ERR
}IVC_ERR_TYPE;

typedef enum
{
	IVT_LD = 0,
	IVT_SD,
	IVT_HD,
	IVT_FHD,
	IVT_XHD
}IVT_VIDEOD_TYPE;

typedef enum
{
    IVT_PTZ_STOP = 0,
	IVT_PTZ_UPLEFT = 1,
	IVT_PTZ_UP = 2,
	IVT_PTZ_UPRIGHT = 3,
	IVT_PTZ_LEFT = 4,
	IVT_PTZ_RIGHT = 5,
	IVT_PTZ_DOWNLEFT = 6,
	IVT_PTZ_DOWN = 7,
	IVT_PTZ_DOWNRIGHT = 8,
	IVT_PTZ_ZOOMOUT = 9,
	IVT_PTZ_ZOOMIN = 10,
	IVT_PTZ_UNKNOWN
}IVT_PTZ_TYPE;

typedef enum
{
	IVT_PTZ_SS_START = 0,
	IVT_PTZ_SS_STOP,
	IVT_PTZ_SS_UNKNOWN
}IVT_PTZ_SS;

typedef enum
{
	IVT_ALARM_SS_START = 0,
	IVT_ALARM_SS_END,
	IVT_ALARM_SS_UNKNOWN
}IVT_ALARM_SS;

typedef enum
{
    IVT_ALARM_LOSS = 1,
	IVT_ALARM_OUTSIDE = 2,
	IVT_ALARM_MD = 3, //motion detection
	IVT_ALARM_RECT = 4, //AlarmRectIntrusionDetectConfig
	IVT_ALARM_BLIND = 5,
	IVT_ALARM_HEARTBEAT = 25,
	IVT_ALARM_UNKNOWN
}IVT_ALARM_TYPE;

typedef enum
{
	IVT_STATE_ONLINE = 0,
	IVT_STATE_UPGRADE,
	IVT_STATE_UNKNOWN
}IVT_STATE_TYPE;

typedef enum
{
	IVT_CHNL_STATE_OFFLINE = 0,
	IVT_CHNL_STATE_ONLINE,
	IVT_CHNL_STATE_LIVE,
	IVT_CHNL_STATE_UNKNOWN
}IVT_CHNL_STATE_TYPE;


#endif


